{"version":3,"file":"assertEqualElements.js","sourceRoot":"","sources":["../src/assertEqualElements.ts"],"names":[],"mappings":";;;AAAA,+CAA4C;AAE5C,yCAAsC;AAEtC,mDAAgD;AAEzC,MAAM,mBAAmB,GAAG,CACjC,CAAW,EACX,CAAW,EACX,UAA4B,GAAG,EAAE;IAC/B,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpB,OAAO,qBAAqB,IAAI,CAAC,SAAS,CACxC,CAAC,CACF,oBAAoB,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC;AAC3C,CAAC,EACD,EAAE;IACF,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,IAAA,mBAAQ,EAAC,CAAC,CAAC,EAAE,IAAA,mBAAQ,EAAC,CAAC,CAAC,CAAC,CAAC;IACtD,IAAA,yBAAW,EACT,OAAO,EACP,OAAO,EACP,OAAO;QACL,kCAAkC,OAAO,iBAAiB,OAAO,EAAE,CACtE,CAAC;IACF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;QAChC,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACtD,IAAA,2BAAmB,EAAC,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;SAClD;aAAM;YACL,IAAA,yBAAW,EACT,IAAA,6BAAa,EAAC,QAAQ,CAAC,EACvB,IAAA,6BAAa,EAAC,QAAQ,CAAC,EACvB,OAAO;gBACL,iCAAiC,CAAC,MAAM,IAAI,CAAC,SAAS,CACpD,QAAQ,CACT,mBAAmB,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CACxD,CAAC;SACH;KACF;AACH,CAAC,CAAC;AAjCW,QAAA,mBAAmB,uBAiC9B","sourcesContent":["import { assertEqual } from \"./assertEqual\";\nimport { AssertionMessage } from \"./type/AssertionMessage\";\nimport { lengthOf } from \"./lengthOf\";\nimport { ListLike } from \"./type/ListLike\";\nimport { toStableValue } from \"./toStableValue\";\n\nexport const assertEqualElements = (\n  a: ListLike,\n  b: ListLike,\n  message: AssertionMessage = () => {\n    console.error(a, b);\n    return `Assertion failed: ${JSON.stringify(\n      a\n    )} is not equal to ${JSON.stringify(b)}`;\n  }\n) => {\n  const [aLength, bLength] = [lengthOf(a), lengthOf(b)];\n  assertEqual(\n    aLength,\n    bLength,\n    message ||\n      `Assertion failed: array length ${aLength} not equal to ${bLength}`\n  );\n  for (let i = 0; i < aLength; i++) {\n    const aElement = a[i];\n    const bElement = b[i];\n    if (Array.isArray(aElement) && Array.isArray(bElement)) {\n      assertEqualElements(aElement, bElement, message);\n    } else {\n      assertEqual(\n        toStableValue(aElement),\n        toStableValue(bElement),\n        message ||\n          `Assertion failed: at index: a[${i}]=>${JSON.stringify(\n            aElement\n          )} not equal to b[${i}]=>${JSON.stringify(bElement)}`\n      );\n    }\n  }\n};\n"]}